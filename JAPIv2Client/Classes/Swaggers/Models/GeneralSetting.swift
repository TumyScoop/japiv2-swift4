//
// GeneralSetting.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class GeneralSetting: Codable {

    public var autoplay: Int?
    public var chat: Int?
    public var exclusive: Int?
    public var googleVerifyCode: String?
    public var mission: Int?
    public var receiveEmail: Bool?
    public var twoFactor: Bool?


    
    public init(autoplay: Int?, chat: Int?, exclusive: Int?, googleVerifyCode: String?, mission: Int?, receiveEmail: Bool?, twoFactor: Bool?) {
        self.autoplay = autoplay
        self.chat = chat
        self.exclusive = exclusive
        self.googleVerifyCode = googleVerifyCode
        self.mission = mission
        self.receiveEmail = receiveEmail
        self.twoFactor = twoFactor
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(autoplay, forKey: "autoplay")
        try container.encodeIfPresent(chat, forKey: "chat")
        try container.encodeIfPresent(exclusive, forKey: "exclusive")
        try container.encodeIfPresent(googleVerifyCode, forKey: "google_verify_code")
        try container.encodeIfPresent(mission, forKey: "mission")
        try container.encodeIfPresent(receiveEmail, forKey: "receive_email")
        try container.encodeIfPresent(twoFactor, forKey: "two_factor")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        autoplay = try container.decodeIfPresent(Int.self, forKey: "autoplay")
        chat = try container.decodeIfPresent(Int.self, forKey: "chat")
        exclusive = try container.decodeIfPresent(Int.self, forKey: "exclusive")
        googleVerifyCode = try container.decodeIfPresent(String.self, forKey: "google_verify_code")
        mission = try container.decodeIfPresent(Int.self, forKey: "mission")
        receiveEmail = try container.decodeIfPresent(Bool.self, forKey: "receive_email")
        twoFactor = try container.decodeIfPresent(Bool.self, forKey: "two_factor")
    }
}

