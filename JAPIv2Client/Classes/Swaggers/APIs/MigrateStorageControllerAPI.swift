//
// MigrateStorageControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift

extension JAPIv2ClientAPI {


open class MigrateStorageControllerAPI {
    /**
     migrateAvatars
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func migrateAvatarsUsingPOST(completion: @escaping ((_ error: Error?) -> Void)) {
        migrateAvatarsUsingPOSTWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     migrateAvatars
     
     - returns: Observable<Void>
     */
    open class func migrateAvatarsUsingPOST() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            migrateAvatarsUsingPOST() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     migrateAvatars
     - POST /migrate/avatars
     - API Key:
       - type: apiKey user-token 
       - name: usertoken

     - returns: RequestBuilder<Void> 
     */
    open class func migrateAvatarsUsingPOSTWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/migrate/avatars"
        let URLString = JAPIv2ClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = JAPIv2ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     migrateCover
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func migrateCoverUsingPOST(completion: @escaping ((_ error: Error?) -> Void)) {
        migrateCoverUsingPOSTWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     migrateCover
     
     - returns: Observable<Void>
     */
    open class func migrateCoverUsingPOST() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            migrateCoverUsingPOST() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     migrateCover
     - POST /migrate/cover
     - API Key:
       - type: apiKey user-token 
       - name: usertoken

     - returns: RequestBuilder<Void> 
     */
    open class func migrateCoverUsingPOSTWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/migrate/cover"
        let URLString = JAPIv2ClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = JAPIv2ClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
