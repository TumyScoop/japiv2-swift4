//
// UserControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift

extension JAPIv2ClientAPI {


open class UserControllerAPI {
    /**
     getBusinessType
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBusinessTypeUsingGET(completion: @escaping ((_ data: GetBusinessType?,_ error: Error?) -> Void)) {
        getBusinessTypeUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     getBusinessType
     
     - returns: Observable<GetBusinessType>
     */
    open class func getBusinessTypeUsingGET() -> Observable<GetBusinessType> {
        return Observable.create { observer -> Disposable in
            getBusinessTypeUsingGET() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     getBusinessType
     - GET /user/business-type
     - API Key:
       - type: apiKey user-token 
       - name: usertoken
     - examples: [{output=none}]

     - returns: RequestBuilder<GetBusinessType> 
     */
    open class func getBusinessTypeUsingGETWithRequestBuilder() -> RequestBuilder<GetBusinessType> {
        let path = "/user/business-type"
        let URLString = JAPIv2ClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GetBusinessType>.Type = JAPIv2ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     getProfile
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfileUsingGET(completion: @escaping ((_ data: ProfileResponse?,_ error: Error?) -> Void)) {
        getProfileUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     getProfile
     
     - returns: Observable<ProfileResponse>
     */
    open class func getProfileUsingGET() -> Observable<ProfileResponse> {
        return Observable.create { observer -> Disposable in
            getProfileUsingGET() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     getProfile
     - GET /user/profile
     - API Key:
       - type: apiKey user-token 
       - name: usertoken
     - examples: [{output=none}]

     - returns: RequestBuilder<ProfileResponse> 
     */
    open class func getProfileUsingGETWithRequestBuilder() -> RequestBuilder<ProfileResponse> {
        let path = "/user/profile"
        let URLString = JAPIv2ClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ProfileResponse>.Type = JAPIv2ClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
}
